**********************************************************************************
Differentially Private Spatial Decomposition Implementation
Version 1.0, Last updated: 10/31/2011
Developed by Entong Shen
Please contact eshen [at] ncsu.edu for comments and questions.
**********************************************************************************

Overview:
---------

The included source code implements differentially private spatial decompositions
to answer a workload of range count queries. The details of these decompositions
are discussed in [1]. Although many of these decompostions, especially those kd-tree
based, can be applied on high-dimensional data, the source code is hard-coded for 2D
in many places. A fanout of four is implemented by default.

If you use this code for any of your work, please cite the following article:

[1] G. Cormode, M. Procopiuc, E. Shen, D. Srivastava and T. Yu, Differentially Private Spatial Decompositions, ICDE 2012.


Requirements:
-------------
Tested with Python 2.6/2.7, Numpy 1.6.0

Usage:
------
1. PrivateMedianExp.py contains the experiments of comparing various private median 
selection schemes. (Figure 4 in [1])

2. MainExp.py contains three major experiments: 1) compare differentially private 
quadtree optimizations, 2) compare various differentially private kd-trees, 3) compare
representative spatial decompositions by varying the maximum height of the tree.
(Figure 3, 5, 6, 7(a) in [1])

3. Input dataset, output directory, number of queries and other parameters can be set in Params.py.

4. Debug information can be accessed in 'debug.log' (generated by the logging module
in run-time).

5. Each experiment in MainExp.py takes significant amount of time to run. If you have
a multi-core processor (at least 4 cores are recommended), you can take advantage of
the parallel processing module of python. Example codes can be found in MainExp.py.
It takes a couple of hours to run each experiment in parallel, depending on your
hardware. 
